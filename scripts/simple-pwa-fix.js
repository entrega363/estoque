// Script simples para corrigir PWA
console.log('üîß Corre√ß√£o Simples PWA');

// Fun√ß√£o principal
async function fixPWA() {
  console.log('üöÄ Iniciando corre√ß√£o...');
  
  try {
    // 1. Limpar cache
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      for (const name of cacheNames) {
        await caches.delete(name);
        console.log('üóëÔ∏è Cache removido: ' + name);
      }
    }
    
    // 2. Limpar storage
    localStorage.clear();
    sessionStorage.clear();
    console.log('‚úÖ Storage limpo');
    
    // 3. Registrar Service Worker
    if ('serviceWorker' in navigator) {
      const registration = await navigator.serviceWorker.register('/sw.js');
      console.log('‚úÖ Service Worker registrado');
    }
    
    // 4. Aguardar um pouco
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 5. Tentar instala√ß√£o
    console.log('üéØ Tentando instala√ß√£o...');
    
    let installPrompt = null;
    
    window.addEventListener('beforeinstallprompt', function(e) {
      console.log('üì± Prompt de instala√ß√£o detectado!');
      e.preventDefault();
      installPrompt = e;
      
      // Executar prompt automaticamente
      setTimeout(async function() {
        try {
          await installPrompt.prompt();
          const result = await installPrompt.userChoice;
          
          if (result.outcome === 'accepted') {
            console.log('üéâ PWA instalado com sucesso!');
          } else {
            console.log('‚ùå Instala√ß√£o rejeitada');
            showInstructions();
          }
        } catch (error) {
          console.error('üí• Erro na instala√ß√£o:', error);
          showInstructions();
        }
      }, 1000);
    });
    
    // 6. Simular clique para ativar prompt
    document.body.click();
    
    // 7. Timeout para instru√ß√µes manuais
    setTimeout(function() {
      if (!installPrompt) {
        console.log('‚è∞ Prompt n√£o detectado - mostrando instru√ß√µes');
        showInstructions();
      }
    }, 5000);
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
    showInstructions();
  }
}

// Instru√ß√µes manuais
function showInstructions() {
  console.log('\nüì± INSTRU√á√ïES MANUAIS:');
  console.log('');
  console.log('ü§ñ ANDROID:');
  console.log('1. Menu (‚ãÆ) > "Instalar app"');
  console.log('2. Se n√£o aparecer, v√° em Configura√ß√µes > Apps > [Navegador] > Permiss√µes');
  console.log('3. Ative "Instalar apps desconhecidas"');
  console.log('');
  console.log('üçé iOS:');
  console.log('1. Bot√£o compartilhar (‚ñ°‚Üó)');
  console.log('2. "Adicionar √† Tela de In√≠cio"');
  console.log('');
  console.log('üíª DESKTOP:');
  console.log('1. √çcone (‚¨á) na barra de endere√ßo');
  console.log('2. Ou Menu (‚ãÆ) > "Instalar"');
}

// Verificar crit√©rios PWA
async function checkPWA() {
  console.log('üìã Verificando PWA...');
  
  try {
    const response = await fetch('/manifest.json');
    const manifest = await response.json();
    
    console.log('‚úÖ Manifest:', manifest.name);
    console.log('‚úÖ √çcones:', manifest.icons.length);
    console.log('‚úÖ Display:', manifest.display);
    
    const hasServiceWorker = 'serviceWorker' in navigator;
    const isHTTPS = location.protocol === 'https:' || location.hostname === 'localhost';
    
    console.log('‚úÖ Service Worker:', hasServiceWorker);
    console.log('‚úÖ HTTPS:', isHTTPS);
    
    return {
      manifest: true,
      icons: manifest.icons.length > 0,
      serviceWorker: hasServiceWorker,
      https: isHTTPS
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar PWA:', error);
    return false;
  }
}

// Expor fun√ß√µes
window.SimplePWA = {
  fix: fixPWA,
  check: checkPWA,
  instructions: showInstructions
};

// Executar automaticamente
console.log('üîÑ Executando em 2 segundos...');
setTimeout(fixPWA, 2000);